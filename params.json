{"name":"Js-routes","tagline":"Brings Rails named routes to javascript","body":"# JsRoutes\r\n[![Build Status](https://travis-ci.org/railsware/js-routes.png)](https://travis-ci.org/railsware/js-routes)\r\n\r\nGenerates javascript file that defines all Rails named routes as javascript helpers\r\n\r\n## Intallation\r\n\r\nYour Rails Gemfile:\r\n\r\n``` ruby\r\ngem \"js-routes\"\r\n```\r\n\r\n### Basic Setup (Asset Pipeline)\r\n\r\nRequire js routes file in `application.js` or other bundle\r\n\r\n``` js\r\n/*\r\n= require js-routes\r\n*/\r\n```\r\n\r\nAlso in order to flush asset pipeline cache sometimes you might need to run:\r\n\r\n``` sh\r\nrake tmp:cache:clear\r\n```\r\n\r\nThis cache is not flushed on server restart in development environment.\r\n\r\n**Important:** If routes.js file is not updated after some configuration change you need to run this rake task again.\r\n\r\n### Advanced Setup\r\n\r\nIf you need to customize routes file create initializer, like `config/initializers/jsroutes.rb`:\r\n\r\n``` ruby\r\nJsRoutes.setup do |config|\r\n  config.option = value\r\nend\r\n```\r\n\r\nAvailable options:\r\n\r\n* `default_url_options` - default parameters to be used to generate url\r\n  * Note that currently only optional parameters (like `:format` or `:trailing_slash`) can be defaulted.\r\n  * Example: {:format => \"json\", :trailing_slash => true}\r\n  * Default: {}\r\n* `exclude` - Array of regexps to exclude from js routes.\r\n  * Default: []\r\n  * The regexp applies only to the name before the `_path` suffix, eg: you want to match exactly `settings_path`, the regexp should be `/^settings$/`\r\n* `include` - Array of regexps to include in js routes.\r\n  * Default: []\r\n  * The regexp applies only to the name before the `_path` suffix, eg: you want to match exactly `settings_path`, the regexp should be `/^settings$/`\r\n* `namespace` - global object used to access routes.\r\n  * Supports nested namespace like `MyProject.routes`\r\n  * Default: `Routes`\r\n* `prefix` - String representing a url path to prepend to all paths.\r\n  * Example: `http://yourdomain.com`. This will cause route helpers to generate full path only.\r\n  * Default: blank\r\n* `camel_case` (version >= 0.8.8) - Generate camel case route names.\r\n  * Default: false\r\n* `url_links` (version >= 0.8.9) - Generate `*_url` links (in addition to default `*_path`), where url_links value is beginning of url routes\r\n  * Example: http[s]://example.com\r\n  * Default: false\r\n\r\n### Very Advanced Setup\r\n\r\nIn case you need multiple route files for different parts of your application, you have to create the files manually.\r\nIf your application has an `admin` and an `application` namespace for example:\r\n\r\n```\r\n# app/assets/javascripts/admin/routes.js.erb\r\n<%= JsRoutes.generate(namespace: \"AdminRoutes\", include: /admin/) %>\r\n\r\n# app/assets/javascripts/admin.js.coffee\r\n#= require admin/routes\r\n```\r\n\r\n```\r\n# app/assets/javascripts/application/routes.js.erb\r\n<%= JsRoutes.generate(namespace: \"AppRoutes\", exclude: /admin/) %>\r\n\r\n# app/assets/javascripts/application.js.coffee\r\n#= require application/routes\r\n```\r\n\r\nIn order to generate the routes to a string:\r\n\r\n```ruby\r\nroutes_js = JsRoutes.generate(options)\r\n```\r\n\r\nIf you want to generate the routes files outside of the asset pipeline, you can use `JsRoutes.generate!`:\r\n\r\n``` ruby\r\npath = \"app/assets/javascripts\"\r\nJsRoutes.generate!(\"#{path}/app_routes.js\", :namespace => \"AppRoutes\", :exclude => [/^admin_/, /^api_/])\r\nJsRoutes.generate!(\"#{path}/adm_routes.js\", :namespace => \"AdmRoutes\", :include => /^admin_/)\r\nJsRoutes.generate!(\"#{path}/api_routes.js\", :namespace => \"ApiRoutes\", :include => /^api_/, :default_url_options => {:format => \"json\"})\r\n```\r\n\r\n## Usage\r\n\r\nConfiguration above will create a nice javascript file with `Routes` object that has all the rails routes available:\r\n\r\n``` js\r\nRoutes.users_path() // => \"/users\"\r\nRoutes.user_path(1) // => \"/users/1\"\r\nRoutes.user_path(1, {format: 'json'}) // => \"/users/1.json\"\r\nRoutes.new_user_project_path(1, {format: 'json'}) // => \"/users/1/projects/new.json\"\r\nRoutes.user_project_path(1,2, {q: 'hello', custom: true}) // => \"/users/1/projects/2?q=hello&custom=true\"\r\nRoutes.user_project_path(1,2, {hello: ['world', 'mars']}) // => \"/users/1/projects/2?hello%5B%5D=world&hello%5B%5D=mars\"\r\n```\r\n\r\nUsing serialized object as route function arguments:\r\n\r\n``` js\r\nvar google = {id: 1, name: \"Google\"};\r\nRoutes.company_path(google) // => \"/companies/1\"\r\nvar google = {id: 1, name: \"Google\", to_param: \"google\"};\r\nRoutes.company_path(google) // => \"/companies/google\"\r\n```\r\n\r\nIn order to make routes helpers available globally:\r\n\r\n``` js\r\njQuery.extend(window, Routes)\r\n```\r\n\r\n## What about security?\r\n\r\njs-routes itself do not have security holes. It makes URLs\r\nwithout access protection more reachable by potential attacker.\r\nIn order to prevent this use `:exclude` option for sensitive urls like `/admin_/`\r\n\r\n## Spork\r\n\r\nWhen using Spork and `Spork.trap_method(Rails::Application::RoutesReloader, :reload!)` you should also do:\r\n\r\n``` ruby\r\nSpork.trap_method(JsRoutes, :generate!)\r\n```\r\n\r\n## Advantages over alternatives\r\n\r\nThere are some alternatives available. Most of them has only basic feature and don't reach the level of quality I accept.\r\nAdvantages of this one are:\r\n\r\n* Rails3 & Rails4 support\r\n* Rich options set\r\n* Support Rails `#to_param` convention for seo optimized paths\r\n* Well tested\r\n\r\n#### Thanks to [Contributors](https://github.com/railsware/js-routes/contributors)\r\n\r\n#### Have fun\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}