{
  "name": "Js-routes",
  "tagline": "Brings Rails named routes to javascript",
  "body": "# JsRoutes\r\n[![Build Status](https://travis-ci.org/railsware/js-routes.svg?branch=master)](https://travis-ci.org/railsware/js-routes)\r\n\r\nGenerates javascript file that defines all Rails named routes as javascript helpers\r\n\r\n## Intallation\r\n\r\nYour Rails Gemfile:\r\n\r\n``` ruby\r\ngem \"js-routes\"\r\n```\r\n\r\n### Basic Setup\r\n\r\nRequire js routes file in `application.js` or other bundle\r\n\r\n``` js\r\n/*\r\n= require js-routes\r\n*/\r\n```\r\n\r\nAlso in order to flush asset pipeline cache sometimes you might need to run:\r\n\r\n``` sh\r\nrake tmp:cache:clear\r\n```\r\n\r\nThis cache is not flushed on server restart in development environment.\r\n\r\n**Important:** If routes.js file is not updated after some configuration change you need to run this rake task again.\r\n\r\n### Advanced Setup\r\n\r\nIf you need to customize routes file create initializer, like `config/initializers/jsroutes.rb`:\r\n\r\n``` ruby\r\nJsRoutes.setup do |config|\r\n  config.option = value\r\nend\r\n```\r\n\r\nAvailable options:\r\n\r\n* `default_url_options` - default parameters used when generating URLs\r\n  * Note that only specific options are supported at this time.\r\n  * Example: {:format => \"json\", :trailing\\_slash => true, :protocol => \"https\", :host => \"example.com\", :port => 3000}\r\n  * Default: {}\r\n* `exclude` - Array of regexps to exclude from js routes.\r\n  * Default: []\r\n  * The regexp applies only to the name before the `_path` suffix, eg: you want to match exactly `settings_path`, the regexp should be `/^settings$/`\r\n* `include` - Array of regexps to include in js routes.\r\n  * Default: []\r\n  * The regexp applies only to the name before the `_path` suffix, eg: you want to match exactly `settings_path`, the regexp should be `/^settings$/`\r\n* `namespace` - global object used to access routes.\r\n  * Supports nested namespace like `MyProject.routes`\r\n  * Default: `Routes`\r\n* `prefix` - String representing a url path to prepend to all paths.\r\n  * Example: `http://yourdomain.com`. This will cause route helpers to generate full path only.\r\n  * Default: blank\r\n* `camel_case` (version >= 0.8.8) - Generate camel case route names.\r\n  * Default: false\r\n* `url_links` (version >= 0.8.9) - Generate `*_url` helpers (in addition to the default `*_path` helpers).\r\n  * Example: true\r\n  * Default: false\r\n  * Note: generated URLs will first use the protocol, host, and port options specified in the route definition. Otherwise, the URL will be based on the option specified in the `default_url_options` config. If no default option has been set, then the URL will fallback to the current URL based on `window.location`.\r\n* `compact` (version > 0.9.9) - Remove `_path` suffix in path routes(`*_url` routes stay untouched if they were enabled)\r\n  * Default: false\r\n  * Sample route call when option is set to true: Routes.users() => `/users`\r\n* `serializer` (version >= 1.1.0) - Puts a JS function here that serializes a Javascript Hash object into URL paramters: `{a: 1, b: 2} => \"a=1&b=2\"`.\r\n  * Default: `nil`. Uses built-in serializer\r\n  * Example: `jQuery.param` - use jQuery's serializer algorithm. You can attach serialize function from your favorite AJAX framework.\r\n  * Example: `MyApp.custom_serialize` - use completely custom serializer of your application.\r\n\r\n### Very Advanced Setup\r\n\r\nIn case you need multiple route files for different parts of your application, you have to create the files manually.\r\nIf your application has an `admin` and an `application` namespace for example:\r\n\r\n```\r\n# app/assets/javascripts/admin/routes.js.erb\r\n<%= JsRoutes.generate(namespace: \"AdminRoutes\", include: /admin/) %>\r\n\r\n# app/assets/javascripts/admin.js.coffee\r\n#= require admin/routes\r\n```\r\n\r\n```\r\n# app/assets/javascripts/application/routes.js.erb\r\n<%= JsRoutes.generate(namespace: \"AppRoutes\", exclude: /admin/) %>\r\n\r\n# app/assets/javascripts/application.js.coffee\r\n#= require application/routes\r\n```\r\n\r\nIn order to generate the routes JS code to a string:\r\n\r\n```ruby\r\nroutes_js = JsRoutes.generate(options)\r\n```\r\n\r\nIf you want to generate the routes files outside of the asset pipeline, you can use `JsRoutes.generate!`:\r\n\r\n``` ruby\r\npath = \"app/assets/javascripts\"\r\nJsRoutes.generate!(\"#{path}/app_routes.js\", :namespace => \"AppRoutes\", :exclude => [/^admin_/, /^api_/])\r\nJsRoutes.generate!(\"#{path}/adm_routes.js\", :namespace => \"AdmRoutes\", :include => /^admin_/)\r\nJsRoutes.generate!(\"#{path}/api_routes.js\", :namespace => \"ApiRoutes\", :include => /^api_/, :default_url_options => {:format => \"json\"})\r\n```\r\n\r\n## Usage\r\n\r\nConfiguration above will create a nice javascript file with `Routes` object that has all the rails routes available:\r\n\r\n``` js\r\nRoutes.users_path() // => \"/users\"\r\nRoutes.user_path(1) // => \"/users/1\"\r\nRoutes.user_path(1, {format: 'json'}) // => \"/users/1.json\"\r\nRoutes.user_path(1, {anchor: 'profile'}) // => \"/users/1#profile\"\r\nRoutes.new_user_project_path(1, {format: 'json'}) // => \"/users/1/projects/new.json\"\r\nRoutes.user_project_path(1,2, {q: 'hello', custom: true}) // => \"/users/1/projects/2?q=hello&custom=true\"\r\nRoutes.user_project_path(1,2, {hello: ['world', 'mars']}) // => \"/users/1/projects/2?hello%5B%5D=world&hello%5B%5D=mars\"\r\n```\r\n\r\nUsing serialized object as route function arguments:\r\n\r\n``` js\r\nvar google = {id: 1, name: \"Google\"};\r\nRoutes.company_path(google) // => \"/companies/1\"\r\nvar google = {id: 1, name: \"Google\", to_param: \"google\"};\r\nRoutes.company_path(google) // => \"/companies/google\"\r\n```\r\n\r\nIn order to make routes helpers available globally:\r\n\r\n``` js\r\njQuery.extend(window, Routes)\r\n```\r\n\r\n## Get spec of routes and required params\r\n\r\nPossible to get `spec` of route by function `toString`:\r\n\r\n```js\r\nRoutes.users_path.toString() // => \"/users(.:format)\"\r\nRoutes.user_path.toString() // => \"/users/:id(.:format)\"\r\n```\r\n\r\nThis function allow to get the same `spec` for route, if you will get string representation of the route function:\r\n\r\n```js\r\n'' + Routes.users_path // => \"/users(.:format)\", a string representation of the object\r\n'' + Routes.user_path // => \"/users/:id(.:format)\"\r\n```\r\n\r\nRoute function also contain inside attribute `required_params` required param names as array:\r\n\r\n```js\r\nRoutes.users_path.required_params // => []\r\nRoutes.user_path.required_params // => ['id']\r\n```\r\n\r\n## What about security?\r\n\r\njs-routes itself do not have security holes. It makes URLs\r\nwithout access protection more reachable by potential attacker.\r\nIn order to prevent this use `:exclude` option for sensitive urls like `/admin_/`\r\n\r\n## Spork\r\n\r\nWhen using Spork and `Spork.trap_method(Rails::Application::RoutesReloader, :reload!)` you should also do:\r\n\r\n``` ruby\r\nSpork.trap_method(JsRoutes, :generate!)\r\n```\r\n\r\n## JS-Routes and heroku\r\n\r\nHeroku environment has a specific problems with setup. It is impossible to use asset pipeline in this environment. You should use \"Very Advanced Setup\" schema in this case.\r\n\r\nFor example create routes.js.erb in assets folder with needed content:\r\n\r\n``` erb\r\n<%= JsRoutes.generate(options) %>\r\n```\r\n\r\nThis should just work.\r\n\r\n## Advantages over alternatives\r\n\r\nThere are some alternatives available. Most of them has only basic feature and don't reach the level of quality I accept.\r\nAdvantages of this one are:\r\n\r\n* Rails 3-5 support\r\n* Rich options set\r\n* Full rails compatibility\r\n* Support Rails `#to_param` convention for seo optimized paths\r\n* Well tested\r\n\r\n#### Thanks to [Contributors](https://github.com/railsware/js-routes/contributors)\r\n\r\n#### Have fun\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}